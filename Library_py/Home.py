# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'C:\Users\yagiz\Desktop\Workspace\Library_Assignment\Library_py\Home.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# region dll

import math
import random
import string
import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QDateTime, Qt
from PyQt5.QtGui import QColor, QIcon
from PyQt5.QtWidgets import QTableWidgetItem, QAbstractItemView, QMessageBox
from PyQt5.QtWidgets import QWidget

import About
import Connect
import Graph
import Instructions
import Login
from utils.attributes import Dialogs
from utils.injection import *

# endregion

conn = temp.conn
_A = "MainWindow"


class Home(QObject):

    def __init__(self):
        super().__init__()

    def setupUi(self, MainWindow):
        MainWindow.window().setWindowIcon(QIcon('assets/icon.jpg'))

        # region Design
        # region Base
        MainWindow.setObjectName(_A)
        MainWindow.resize(800, 600)
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        MainWindow.setStyleSheet("background-color: rgb(31, 33, 34);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 250, 760, 300))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("background-color:rgb(39, 41, 42);color: rgb(0, 0, 0);")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.tblAdmin = QtWidgets.QTableWidget(self.tab)
        self.tblAdmin.setObjectName("tblAdmin")
        self.tblAdmin.setColumnCount(0)
        self.tblAdmin.setRowCount(0)

        scroll_area = QtWidgets.QScrollArea(self.tab)
        scroll_area.setGeometry(QtCore.QRect(0, 0, 760, 300))
        scroll_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tblAdmin = QtWidgets.QTableWidget(scroll_area)
        self.tblAdmin.setGeometry(QtCore.QRect(0, 0, 760, 275))

        self.tblAdmin.setStyleSheet("background-color: rgb(0,0,0);")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tblLibrarians = QtWidgets.QTableWidget(self.tab_2)
        self.tblLibrarians.setGeometry(QtCore.QRect(0, 0, 760, 300))
        self.tblLibrarians.setObjectName("tblLibrarians")
        self.tblLibrarians.setColumnCount(0)
        self.tblLibrarians.setRowCount(0)

        scroll_area1 = QtWidgets.QScrollArea(self.tab_2)
        scroll_area1.setGeometry(QtCore.QRect(0, 0, 760, 300))
        scroll_area1.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tblLibrarians = QtWidgets.QTableWidget(scroll_area1)
        self.tblLibrarians.setGeometry(QtCore.QRect(0, 0, 760, 275))
        self.tblLibrarians.setStyleSheet("background-color: rgb(0,0,0);")

        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tblCatalog = QtWidgets.QTableWidget(self.tab_3)
        self.tblCatalog.setGeometry(QtCore.QRect(0, 0, 760, 300))
        self.tblCatalog.setObjectName("tblCatalog")
        self.tblCatalog.setColumnCount(0)
        self.tblCatalog.setRowCount(0)

        scroll_area2 = QtWidgets.QScrollArea(self.tab_3)
        scroll_area2.setGeometry(QtCore.QRect(0, 0, 760, 300))
        scroll_area2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tblCatalog = QtWidgets.QTableWidget(scroll_area2)
        self.tblCatalog.setGeometry(QtCore.QRect(0, 0, 760, 275))

        self.tblCatalog.setStyleSheet("background-color: rgb(0,0,0);")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tblOrders = QtWidgets.QTableWidget(self.tab_4)
        self.tblOrders.setGeometry(QtCore.QRect(0, 0, 760, 300))
        self.tblOrders.setObjectName("tblOrders")
        self.tblOrders.setColumnCount(0)
        self.tblOrders.setRowCount(0)

        scroll_area3 = QtWidgets.QScrollArea(self.tab_4)
        scroll_area3.setGeometry(QtCore.QRect(0, 0, 760, 300))
        scroll_area3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tblOrders = QtWidgets.QTableWidget(scroll_area3)
        self.tblOrders.setGeometry(QtCore.QRect(0, 0, 760, 275))

        self.tblOrders.setStyleSheet("background-color: rgb(0,0,0);")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tblReaders = QtWidgets.QTableWidget(self.tab_5)
        self.tblReaders.setGeometry(QtCore.QRect(0, 0, 760, 300))
        self.tblReaders.setObjectName("tblReaders")
        self.tblReaders.setColumnCount(0)
        self.tblReaders.setRowCount(0)

        scroll_area4 = QtWidgets.QScrollArea(self.tab_5)
        scroll_area4.setGeometry(QtCore.QRect(0, 0, 760, 300))
        scroll_area4.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tblReaders = QtWidgets.QTableWidget(scroll_area4)
        self.tblReaders.setGeometry(QtCore.QRect(0, 0, 760, 275))

        self.tblReaders.setStyleSheet("background-color: rgb(0,0,0);")
        self.tabWidget.addTab(self.tab_5, "")
        self.txtSearch = QtWidgets.QLineEdit(self.centralwidget)
        self.txtSearch.setGeometry(QtCore.QRect(668, 250, 113, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color:rgb(39, 41, 42);color:rgb(255,255,255);")
        self.txtSearch.setDragEnabled(False)
        self.txtSearch.setObjectName("txtSearch")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 10, 361, 211))
        self.frame.setStyleSheet("background-color:rgb(39, 41, 42);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 10, 31, 16))
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")

        self.lblId = QtWidgets.QLabel(self.frame)
        self.lblId.setGeometry(QtCore.QRect(30, 10, 31, 16))
        self.lblId.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblId.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblId.setObjectName("lblId")

        self.lblUniqueId = QtWidgets.QLabel(self.frame)
        self.lblUniqueId.setGeometry(QtCore.QRect(250, 10, 101, 16))
        self.lblUniqueId.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblUniqueId.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblUniqueId.setObjectName("lblUniqueId")

        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(180, 10, 61, 16))
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(10, 50, 81, 16))
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")

        self.lblUsername = QtWidgets.QLabel(self.frame)
        self.lblUsername.setGeometry(QtCore.QRect(80, 50, 81, 16))
        self.lblUsername.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblUsername.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblUsername.setObjectName("lblUsername")

        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(180, 50, 81, 16))
        self.label_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_7.setObjectName("label_7")

        self.lblType = QtWidgets.QLabel(self.frame)
        self.lblType.setGeometry(QtCore.QRect(220, 50, 81, 16))
        self.lblType.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblType.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblType.setObjectName("lblType")

        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(10, 90, 41, 16))
        self.label_9.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")

        self.lblName = QtWidgets.QLabel(self.frame)
        self.lblName.setGeometry(QtCore.QRect(50, 90, 81, 16))
        self.lblName.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblName.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblName.setObjectName("lblName")

        self.lblSurname = QtWidgets.QLabel(self.frame)
        self.lblSurname.setGeometry(QtCore.QRect(240, 90, 81, 16))
        self.lblSurname.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblSurname.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblSurname.setObjectName("lblSurname")

        self.label_12 = QtWidgets.QLabel(self.frame)
        self.label_12.setGeometry(QtCore.QRect(180, 90, 61, 16))
        self.label_12.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")

        self.label_13 = QtWidgets.QLabel(self.frame)
        self.label_13.setGeometry(QtCore.QRect(10, 130, 41, 16))
        self.label_13.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_13.setObjectName("label_13")

        self.lblEmail = QtWidgets.QLabel(self.frame)
        self.lblEmail.setGeometry(QtCore.QRect(50, 130, 111, 16))
        self.lblEmail.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblEmail.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblEmail.setObjectName("lblEmail")

        self.lblStatus = QtWidgets.QLabel(self.frame)
        self.lblStatus.setGeometry(QtCore.QRect(220, 130, 111, 16))
        self.lblStatus.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblStatus.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblStatus.setObjectName("lblStatus")

        self.label_16 = QtWidgets.QLabel(self.frame)
        self.label_16.setGeometry(QtCore.QRect(180, 130, 41, 16))
        self.label_16.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_16.setObjectName("label_16")

        self.lblCreatedAt = QtWidgets.QLabel(self.frame)
        self.lblCreatedAt.setGeometry(QtCore.QRect(80, 168, 71, 20))
        self.lblCreatedAt.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblCreatedAt.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblCreatedAt.setObjectName("lblCreatedAt")

        self.label_18 = QtWidgets.QLabel(self.frame)
        self.label_18.setGeometry(QtCore.QRect(10, 170, 71, 16))
        self.label_18.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_18.setObjectName("label_18")

        self.lblUpdatedAt = QtWidgets.QLabel(self.frame)
        self.lblUpdatedAt.setGeometry(QtCore.QRect(250, 168, 71, 20))
        self.lblUpdatedAt.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.lblUpdatedAt.setStyleSheet("color: rgb(255, 255, 255);")
        self.lblUpdatedAt.setObjectName("lblUpdatedAt")

        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(180, 170, 71, 16))
        self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_20.setObjectName("label_20")

        self.btnNextPage = QtWidgets.QPushButton(self.centralwidget)
        self.btnNextPage.setGeometry(QtCore.QRect(630, 250, 31, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        self.btnNextPage.setFont(font)
        self.btnNextPage.setStyleSheet("background-color:rgb(39, 41, 42);color:rgb(255,255,255);")
        self.btnNextPage.setObjectName("btnNextPage")
        self.btnPrevPage = QtWidgets.QPushButton(self.centralwidget)
        self.btnPrevPage.setGeometry(QtCore.QRect(510, 250, 31, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        self.btnPrevPage.setFont(font)
        self.btnPrevPage.setStyleSheet("background-color:rgb(39, 41, 42);color:rgb(255,255,255);")
        self.btnPrevPage.setObjectName("btnPrevPage")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(550, 250, 72, 20))
        self.comboBox.setStyleSheet("background-color:rgb(39, 41, 42);color:rgb(255,255,255);")
        self.comboBox.setObjectName("comboBox")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget_2.setGeometry(QtCore.QRect(400, 10, 381, 211))
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.tabWidget_2.addTab(self.tab_7, "")
        self.drpCRUD = QtWidgets.QComboBox(self.centralwidget)
        self.drpCRUD.setGeometry(QtCore.QRect(710, 10, 72, 20))
        self.drpCRUD.setStyleSheet("background-color:rgb(39, 41, 42);color:rgb(255,255,255);")
        self.drpCRUD.setObjectName("drpCRUD")
        self.drpCRUD.addItem("")
        self.drpCRUD.addItem("")
        self.drpCRUD.addItem("")
        self.drpCRUD.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setStyleSheet("color: rgb(255, 255, 255);")
        self.menubar.setObjectName("menubar")
        self.menuAdministrator = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.menuAdministrator.setFont(font)
        self.menuAdministrator.setStyleSheet("color: rgb(255, 255, 255);")
        self.menuAdministrator.setObjectName("menuAdministrator")

        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menubar.addAction(self.menuAbout.menuAction())
        action = QtWidgets.QAction("About", self)
        action.triggered.connect(self.about)
        self.menuAbout.addAction(action)
        self.menubar.addAction(self.menuAbout.menuAction())

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionInstructions = QtWidgets.QAction(MainWindow)
        self.actionInstructions.setObjectName("actionInstructions")
        self.menuAdministrator.addAction(self.actionInstructions)
        self.actionLogout = QtWidgets.QAction(MainWindow)
        self.actionLogout.setObjectName("actionLogout")
        self.actionDatabase = QtWidgets.QAction(MainWindow)
        self.actionDatabase.setObjectName("actionDatabase")
        self.menuAdministrator.addAction(self.actionDatabase)
        self.menuAdministrator.addAction(self.actionLogout)

        self.menubar.addAction(self.menuAbout.menuAction())
        self.menubar.addAction(self.menuAdministrator.menuAction())

        self.menuPerformence = QtWidgets.QMenu(self.menubar)
        self.menuPerformence.setObjectName("menuPerformence")
        self.menubar.addAction(self.menuPerformence.menuAction())
        action = QtWidgets.QAction("Performence", self)
        action.triggered.connect(self.performence)
        self.menuPerformence.addAction(action)
        self.menubar.addAction(self.menuPerformence.menuAction())

        MainWindow.setMenuBar(self.menubar)

        # endregion

        # region Admin Layout

        self.adminFormInsertGroup = QtWidgets.QWidget(self.tab_6)
        self.adminFormInsertGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.adminFormInsertGroup.setObjectName("adminFormInsertGroup")
        self.adminInsertLayout = QtWidgets.QFormLayout(self.adminFormInsertGroup)
        self.adminInsertLayout.setContentsMargins(0, 0, 0, 0)
        self.adminInsertLayout.setObjectName("adminInsertLayout")
        self.txtAdminUsernameInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminUsernameInsert.setObjectName("txtAdminUsernameInsert")
        self.adminInsertLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtAdminUsernameInsert)
        self.txtAdminNameInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminNameInsert.setObjectName("txtAdminNameInsert")
        self.adminInsertLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtAdminNameInsert)
        self.txtAdminSurnameInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminSurnameInsert.setObjectName("txtAdminSurnameInsert")
        self.adminInsertLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.txtAdminSurnameInsert)
        self.txtAdminEmailInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminEmailInsert.setObjectName("txtAdminEmailInsert")
        self.adminInsertLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txtAdminEmailInsert)
        self.txtAdminPasswordInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminPasswordInsert.setObjectName("txtAdminPasswordInsert")
        self.adminInsertLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.txtAdminPasswordInsert)
        self.txtAdminConfirmInsert = QtWidgets.QLineEdit(self.adminFormInsertGroup)
        self.txtAdminConfirmInsert.setObjectName("txtAdminConfirmInsert")
        self.adminInsertLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txtAdminConfirmInsert)
        self.btnAdminInsert = QtWidgets.QPushButton(self.adminFormInsertGroup)
        self.btnAdminInsert.setObjectName("btnAdminInsert")
        self.adminInsertLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.btnAdminInsert)
        self.cmbAdminInsert = QtWidgets.QComboBox(self.adminFormInsertGroup)
        self.cmbAdminInsert.setObjectName("cmbAdminInsert")
        self.cmbAdminInsert.addItem("")
        self.cmbAdminInsert.addItem("")
        self.adminInsertLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.cmbAdminInsert)
        self.cmbAdminStatusInsert = QtWidgets.QComboBox(self.adminFormInsertGroup)
        self.cmbAdminStatusInsert.setObjectName("cmbAdminStatusInsert")
        self.cmbAdminStatusInsert.addItem("")
        self.cmbAdminStatusInsert.addItem("")
        self.adminInsertLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.cmbAdminStatusInsert)
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7.setObjectName("tab_7")
        self.adminFormEditGroup = QtWidgets.QWidget(self.tab_7)
        self.adminFormEditGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.adminFormEditGroup.setObjectName("adminFormEditGroup")
        self.adminEditLayout = QtWidgets.QFormLayout(self.adminFormEditGroup)
        self.adminEditLayout.setContentsMargins(0, 0, 0, 0)
        self.adminEditLayout.setObjectName("adminEditLayout")
        self.txtAdminUsernameEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminUsernameEdit.setObjectName("txtAdminUsernameEdit")
        self.adminEditLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtAdminUsernameEdit)
        self.txtAdminNameEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminNameEdit.setObjectName("txtAdminNameEdit")
        self.adminEditLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtAdminNameEdit)
        self.txtAdminSurnameEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminSurnameEdit.setObjectName("txtAdminSurnameEdit")
        self.adminEditLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.txtAdminSurnameEdit)
        self.txtAdminEmailEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminEmailEdit.setObjectName("txtAdminEmailEdit")
        self.adminEditLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txtAdminEmailEdit)
        self.txtAdminPasswordEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminPasswordEdit.setObjectName("txtAdminPasswordEdit")
        self.adminEditLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.txtAdminPasswordEdit)
        self.txtAdminConfirmEdit = QtWidgets.QLineEdit(self.adminFormEditGroup)
        self.txtAdminConfirmEdit.setObjectName("txtAdminConfirmEdit")
        self.adminEditLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txtAdminConfirmEdit)
        self.cmbAdminStatusEdit = QtWidgets.QComboBox(self.adminFormEditGroup)
        self.cmbAdminStatusEdit.setObjectName("cmbAdminStatusEdit")
        self.cmbAdminStatusEdit.addItem("")
        self.cmbAdminStatusEdit.addItem("")
        self.adminEditLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.cmbAdminStatusEdit)
        self.cmbAdminEdit = QtWidgets.QComboBox(self.adminFormEditGroup)
        self.cmbAdminEdit.setObjectName("cmbAdminEdit")
        self.cmbAdminEdit.addItem("")
        self.cmbAdminEdit.addItem("")
        self.adminEditLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.cmbAdminEdit)
        self.btnAdminEdit = QtWidgets.QPushButton(self.adminFormEditGroup)
        self.btnAdminEdit.setObjectName("btnAdminEdit")
        self.adminEditLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.btnAdminEdit)
        self.tabWidget_2.addTab(self.tab_7, "")

        # endregion

        # region Catalog Layout
        self.catalogFormInsertGroup = QtWidgets.QWidget(self.tab_6)
        self.catalogFormInsertGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.catalogFormInsertGroup.setObjectName("catalogFormInsertGroup")
        self.catalogInsertLayout = QtWidgets.QFormLayout(self.catalogFormInsertGroup)
        self.catalogInsertLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        self.catalogInsertLayout.setContentsMargins(0, 0, 0, 0)
        self.catalogInsertLayout.setHorizontalSpacing(4)
        self.catalogInsertLayout.setVerticalSpacing(12)
        self.catalogInsertLayout.setObjectName("catalogInsertLayout")
        self.txtCatalogNameInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogNameInsert.setText("")
        self.txtCatalogNameInsert.setObjectName("txtCatalogNameInsert")
        self.catalogInsertLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtCatalogNameInsert)
        self.txtCatalogAuthorInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogAuthorInsert.setObjectName("txtCatalogAuthorInsert")
        self.catalogInsertLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtCatalogAuthorInsert)
        self.txtCatalogPageInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogPageInsert.setObjectName("txtCatalogPageInsert")
        self.catalogInsertLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.txtCatalogPageInsert)
        self.txtCatalogPrintingInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogPrintingInsert.setObjectName("txtCatalogPrintingInsert")
        self.catalogInsertLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txtCatalogPrintingInsert)
        self.txtCatalogPublicationInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogPublicationInsert.setObjectName("txtCatalogPublicationInsert")
        self.catalogInsertLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.txtCatalogPublicationInsert)
        self.txtCatalogPrintSkinInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogPrintSkinInsert.setObjectName("txtCatalogPrintSkinInsert")
        self.catalogInsertLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txtCatalogPrintSkinInsert)
        self.btnCatalogInsert = QtWidgets.QPushButton(self.catalogFormInsertGroup)
        self.btnCatalogInsert.setObjectName("btnCatalogInsert")
        self.catalogInsertLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.btnCatalogInsert)
        self.txtCatalogLanguageInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogLanguageInsert.setObjectName("txtCatalogLanguageInsert")
        self.catalogInsertLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.txtCatalogLanguageInsert)
        self.txtCatalogPublicationYearInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogPublicationYearInsert.setObjectName("txtCatalogPublicationYearInsert")
        self.catalogInsertLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole,
                                           self.txtCatalogPublicationYearInsert)
        self.txtCatalogTotalInsert = QtWidgets.QLineEdit(self.catalogFormInsertGroup)
        self.txtCatalogTotalInsert.setObjectName("txtCatalogTotalInsert")
        self.catalogInsertLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.txtCatalogTotalInsert)
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7.setObjectName("tab_7")
        self.catalogFormEditGroup = QtWidgets.QWidget(self.tab_7)
        self.catalogFormEditGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.catalogFormEditGroup.setObjectName("catalogFormEditGroup")
        self.catalogEditLayout = QtWidgets.QFormLayout(self.catalogFormEditGroup)
        self.catalogEditLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        self.catalogEditLayout.setContentsMargins(0, 0, 0, 0)
        self.catalogEditLayout.setHorizontalSpacing(4)
        self.catalogEditLayout.setVerticalSpacing(12)
        self.catalogEditLayout.setObjectName("catalogEditLayout")
        self.txtCatalogNameEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogNameEdit.setText("")
        self.txtCatalogNameEdit.setObjectName("txtCatalogNameEdit")
        self.catalogEditLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtCatalogNameEdit)
        self.txtCatalogAuthorEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogAuthorEdit.setObjectName("txtCatalogAuthorEdit")
        self.catalogEditLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtCatalogAuthorEdit)
        self.txtCatalogPageEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogPageEdit.setObjectName("txtCatalogPageEdit")
        self.catalogEditLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.txtCatalogPageEdit)
        self.txtCatalogPrintingEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogPrintingEdit.setObjectName("txtCatalogPrintingEdit")
        self.catalogEditLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txtCatalogPrintingEdit)
        self.txtCatalogPublicationEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogPublicationEdit.setObjectName("txtCatalogPublicationEdit")
        self.catalogEditLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.txtCatalogPublicationEdit)
        self.txtCatalogPrintSkinEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogPrintSkinEdit.setObjectName("txtCatalogPrintSkinEdit")
        self.catalogEditLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txtCatalogPrintSkinEdit)
        self.btnCatalogEdit = QtWidgets.QPushButton(self.catalogFormEditGroup)
        self.btnCatalogEdit.setObjectName("btnCatalogEdit")
        self.catalogEditLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.btnCatalogEdit)
        self.txtCatalogLanguageEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogLanguageEdit.setObjectName("txtCatalogLanguageEdit")
        self.catalogEditLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.txtCatalogLanguageEdit)
        self.txtCatalogPublicationYearEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogPublicationYearEdit.setObjectName("txtCatalogPublicationYearEdit")
        self.catalogEditLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.txtCatalogPublicationYearEdit)
        self.txtCatalogTotalEdit = QtWidgets.QLineEdit(self.catalogFormEditGroup)
        self.txtCatalogTotalEdit.setObjectName("txtCatalogTotalEdit")
        self.catalogEditLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.txtCatalogTotalEdit)
        self.tabWidget_2.addTab(self.tab_7, "")
        # endregion

        # region Order Layout
        self.orderFormInsertGroup = QtWidgets.QWidget(self.tab_6)
        self.orderFormInsertGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.orderFormInsertGroup.setObjectName("orderFormInsertGroup")

        self.adminInsertLayout = QtWidgets.QFormLayout(self.orderFormInsertGroup)
        self.adminInsertLayout.setContentsMargins(0, 0, 0, 0)
        self.adminInsertLayout.setObjectName("adminInsertLayout")
        self.txtOrderUserUIDInsert = QtWidgets.QLineEdit(self.orderFormInsertGroup)
        self.txtOrderUserUIDInsert.setObjectName("txtOrderUserUIDInsert")
        self.adminInsertLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtOrderUserUIDInsert)
        self.txtOrderCatalogUIDInsert = QtWidgets.QLineEdit(self.orderFormInsertGroup)
        self.txtOrderCatalogUIDInsert.setObjectName("txtOrderCatalogUIDInsert")
        self.adminInsertLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtOrderCatalogUIDInsert)
        self.cmbOrderType = QtWidgets.QComboBox(self.orderFormInsertGroup)
        self.cmbOrderType.setObjectName("cmbOrderType")
        self.cmbOrderType.addItem("")
        self.cmbOrderType.addItem("")
        self.adminInsertLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.cmbOrderType)
        self.cmbIsReturned = QtWidgets.QComboBox(self.orderFormInsertGroup)
        self.cmbIsReturned.setObjectName("cmbIsReturned")
        self.cmbIsReturned.addItem("")
        self.cmbIsReturned.addItem("")
        self.adminInsertLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cmbIsReturned)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_22 = QtWidgets.QLabel(self.orderFormInsertGroup)
        self.label_22.setObjectName("label_22")
        self.verticalLayout_3.addWidget(self.label_22)
        self.dateEndDateInsert = QtWidgets.QDateTimeEdit(self.orderFormInsertGroup)
        self.dateEndDateInsert.setObjectName("dateEndDateInsert")
        self.verticalLayout_3.addWidget(self.dateEndDateInsert)
        self.adminInsertLayout.setLayout(2, QtWidgets.QFormLayout.FieldRole, self.verticalLayout_3)
        self.btnOrderInsert = QtWidgets.QPushButton(self.orderFormInsertGroup)
        self.btnOrderInsert.setObjectName("btnOrderInsert")
        self.adminInsertLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.btnOrderInsert)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_21 = QtWidgets.QLabel(self.orderFormInsertGroup)
        self.label_21.setObjectName("label_21")
        self.verticalLayout_2.addWidget(self.label_21)
        self.dateStartDateInsert = QtWidgets.QDateTimeEdit(self.orderFormInsertGroup)
        self.dateStartDateInsert.setObjectName("dateStartDateInsert")
        self.verticalLayout_2.addWidget(self.dateStartDateInsert)
        self.adminInsertLayout.setLayout(2, QtWidgets.QFormLayout.LabelRole, self.verticalLayout_2)
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7.setObjectName("tab_7")
        self.orderFormEditGroup = QtWidgets.QWidget(self.tab_7)
        self.orderFormEditGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.orderFormEditGroup.setObjectName("orderFormEditGroup")
        self.adminEditLayout = QtWidgets.QFormLayout(self.orderFormEditGroup)
        self.adminEditLayout.setContentsMargins(0, 0, 0, 0)
        self.adminEditLayout.setObjectName("adminEditLayout")
        self.txtOrderUserUIDEdit = QtWidgets.QLineEdit(self.orderFormEditGroup)
        self.txtOrderUserUIDEdit.setObjectName("txtOrderUserUIDEdit")
        self.adminEditLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.txtOrderUserUIDEdit)
        self.txtOrderCatalogUIDEdit = QtWidgets.QLineEdit(self.orderFormEditGroup)
        self.txtOrderCatalogUIDEdit.setObjectName("txtOrderCatalogUIDEdit")
        self.adminEditLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txtOrderCatalogUIDEdit)
        self.cmbOrderTypeEdit = QtWidgets.QComboBox(self.orderFormEditGroup)
        self.cmbOrderTypeEdit.setObjectName("cmbOrderTypeEdit")
        self.cmbOrderTypeEdit.addItem("")
        self.cmbOrderTypeEdit.addItem("")
        self.adminEditLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.cmbOrderTypeEdit)
        self.cmbIsReturnedEdit = QtWidgets.QComboBox(self.orderFormEditGroup)
        self.cmbIsReturnedEdit.setObjectName("cmbIsReturnedEdit")
        self.cmbIsReturnedEdit.addItem("")
        self.cmbIsReturnedEdit.addItem("")
        self.adminEditLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cmbIsReturnedEdit)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_23 = QtWidgets.QLabel(self.orderFormEditGroup)
        self.label_23.setObjectName("label_23")
        self.verticalLayout_4.addWidget(self.label_23)
        self.dateEndDateEdit = QtWidgets.QDateTimeEdit(self.orderFormEditGroup)
        self.dateEndDateEdit.setObjectName("dateEndDateEdit")
        self.verticalLayout_4.addWidget(self.dateEndDateEdit)
        self.adminEditLayout.setLayout(2, QtWidgets.QFormLayout.FieldRole, self.verticalLayout_4)
        self.btnOrderEdit = QtWidgets.QPushButton(self.orderFormEditGroup)
        self.btnOrderEdit.setObjectName("btnOrderEdit")
        self.adminEditLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.btnOrderEdit)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_24 = QtWidgets.QLabel(self.orderFormEditGroup)
        self.label_24.setObjectName("label_24")
        self.verticalLayout_5.addWidget(self.label_24)
        self.dateStartDateEdit = QtWidgets.QDateTimeEdit(self.orderFormEditGroup)
        self.dateStartDateEdit.setObjectName("dateStartDateEdit")
        self.verticalLayout_5.addWidget(self.dateStartDateEdit)
        self.adminEditLayout.setLayout(2, QtWidgets.QFormLayout.LabelRole, self.verticalLayout_5)
        self.tabWidget_2.addTab(self.tab_7, "")
        # endregion

        # region Reader Layout
        self.readerFormInsertGroup = QtWidgets.QWidget(self.tab_6)
        self.readerFormInsertGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.readerFormInsertGroup.setObjectName("readerFormInsertGroup")
        self.readerInsertLayout = QtWidgets.QGridLayout(self.readerFormInsertGroup)
        self.readerInsertLayout.setContentsMargins(0, 0, 0, 0)
        self.readerInsertLayout.setObjectName("readerInsertLayout")
        self.txtReaderUsernameInsert = QtWidgets.QLineEdit(self.readerFormInsertGroup)
        self.txtReaderUsernameInsert.setObjectName("txtReaderUsernameInsert")
        self.readerInsertLayout.addWidget(self.txtReaderUsernameInsert, 0, 0, 1, 1)
        self.txtReaderNameInsert = QtWidgets.QLineEdit(self.readerFormInsertGroup)
        self.txtReaderNameInsert.setObjectName("txtReaderNameInsert")
        self.readerInsertLayout.addWidget(self.txtReaderNameInsert, 0, 1, 1, 1)
        self.txtReaderSurnameInsert = QtWidgets.QLineEdit(self.readerFormInsertGroup)
        self.txtReaderSurnameInsert.setObjectName("txtReaderSurnameInsert")
        self.readerInsertLayout.addWidget(self.txtReaderSurnameInsert, 1, 0, 1, 1)
        self.txtReaderEmailInsert = QtWidgets.QLineEdit(self.readerFormInsertGroup)
        self.txtReaderEmailInsert.setObjectName("txtReaderEmailInsert")
        self.readerInsertLayout.addWidget(self.txtReaderEmailInsert, 1, 1, 1, 1)
        self.cmbReaderStatus = QtWidgets.QComboBox(self.readerFormInsertGroup)
        self.cmbReaderStatus.setObjectName("cmbReaderStatus")
        self.cmbReaderStatus.addItem("")
        self.cmbReaderStatus.addItem("")
        self.cmbReaderStatus.addItem("")
        self.readerInsertLayout.addWidget(self.cmbReaderStatus, 2, 0, 1, 1)
        self.btnReaderInsert = QtWidgets.QPushButton(self.readerFormInsertGroup)
        self.btnReaderInsert.setObjectName("btnReaderInsert")
        self.readerInsertLayout.addWidget(self.btnReaderInsert, 2, 1, 1, 1)
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7.setObjectName("tab_7")
        self.readerFormEditGroup = QtWidgets.QWidget(self.tab_7)
        self.readerFormEditGroup.setGeometry(QtCore.QRect(0, 0, 371, 181))
        self.readerFormEditGroup.setObjectName("readerFormEditGroup")
        self.readerEditLayout = QtWidgets.QGridLayout(self.readerFormEditGroup)
        self.readerEditLayout.setContentsMargins(0, 0, 0, 0)
        self.readerEditLayout.setObjectName("readerEditLayout")
        self.txtReaderUsernameEdit = QtWidgets.QLineEdit(self.readerFormEditGroup)
        self.txtReaderUsernameEdit.setObjectName("txtReaderUsernameEdit")
        self.readerEditLayout.addWidget(self.txtReaderUsernameEdit, 0, 0, 1, 1)
        self.txtReaderNameEdit = QtWidgets.QLineEdit(self.readerFormEditGroup)
        self.txtReaderNameEdit.setObjectName("txtReaderNameEdit")
        self.readerEditLayout.addWidget(self.txtReaderNameEdit, 0, 1, 1, 1)
        self.txtReaderSurnameEdit = QtWidgets.QLineEdit(self.readerFormEditGroup)
        self.txtReaderSurnameEdit.setObjectName("txtReaderSurnameEdit")
        self.readerEditLayout.addWidget(self.txtReaderSurnameEdit, 1, 0, 1, 1)
        self.txtReaderEmailEdit = QtWidgets.QLineEdit(self.readerFormEditGroup)
        self.txtReaderEmailEdit.setObjectName("txtReaderEmailEdit")
        self.readerEditLayout.addWidget(self.txtReaderEmailEdit, 1, 1, 1, 1)
        self.cmbReaderStatusEdit = QtWidgets.QComboBox(self.readerFormEditGroup)
        self.cmbReaderStatusEdit.setObjectName("cmbReaderStatusEdit")
        self.cmbReaderStatusEdit.addItem("")
        self.cmbReaderStatusEdit.addItem("")
        self.cmbReaderStatusEdit.addItem("")
        self.readerEditLayout.addWidget(self.cmbReaderStatusEdit, 2, 0, 1, 1)
        self.btnReaderEdit = QtWidgets.QPushButton(self.readerFormEditGroup)
        self.btnReaderEdit.setObjectName("btnReaderEdit")
        self.readerEditLayout.addWidget(self.btnReaderEdit, 2, 1, 1, 1)
        self.tabWidget_2.addTab(self.tab_7, "")
        # endregion
        # endregion

        # region Events
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        self.drpCRUD.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.tabWidget.currentChanged.connect(self.tab_changed)
        self.comboBox.currentIndexChanged.connect(lambda: self.update_table(self.comboBox.currentIndex() + 1))
        self.btnPrevPage.clicked.connect(lambda: self.update_table(self.comboBox.currentIndex()))
        self.btnNextPage.clicked.connect(lambda: self.update_table(self.comboBox.currentIndex() + 2))
        self.txtSearch.textChanged.connect(
            lambda: self.search(temp.temp_current_selected_table, temp.temp_table_widget, self.txtSearch.text(), 10,
                                self.comboBox.currentIndex()))
        self.drpCRUD.currentIndexChanged.connect(
            lambda: self.update_panel_tab(None, _translate=QtCore.QCoreApplication.translate))

        self.btnOrderInsert.clicked.connect(lambda: self.insert_record("Orders"))
        self.btnOrderEdit.clicked.connect(lambda: self.update_record("Orders"))

        self.btnReaderEdit.clicked.connect(lambda: self.update_record("Reader"))
        self.btnReaderInsert.clicked.connect(lambda: self.insert_record("Reader"))

        self.btnAdminInsert.clicked.connect(lambda: self.insert_record("Administrator"))
        self.btnAdminEdit.clicked.connect(lambda: self.update_record("Administrator"))

        self.btnCatalogEdit.clicked.connect(lambda: self.update_record("Catalog"))
        self.btnCatalogInsert.clicked.connect(lambda: self.insert_record("Catalog"))

        self.tblAdmin.doubleClicked.connect(
            lambda index: self.delete_record(index, "Administrator", "Administrator_UID"))
        self.tblCatalog.doubleClicked.connect(lambda index: self.delete_record(index, "Catalog", "Catalog_UID"))
        self.tblOrders.doubleClicked.connect(lambda index: self.delete_record(index, "Orders", "Order_UID"))
        self.tblLibrarians.doubleClicked.connect(
            lambda index: self.delete_record(index, "Administrator", "Administrator_UID"))
        self.tblReaders.doubleClicked.connect(lambda index: self.delete_record(index, "Reader", "Reader_UID"))

        self.tblAdmin.clicked.connect(lambda index: self.get_item_uid(index, "Admin"))
        self.tblCatalog.clicked.connect(lambda index: self.get_item_uid(index, "Catalog"))
        self.tblOrders.clicked.connect(lambda index: self.get_item_uid(index, "Order"))
        self.tblLibrarians.clicked.connect(lambda index: self.get_item_uid(index, "Librarian"))
        self.tblReaders.clicked.connect(lambda index: self.get_item_uid(index, "Reader"))

        self.actionLogout.triggered.connect(lambda: self.logout(MainWindow))
        self.actionDatabase.triggered.connect(lambda: self.database(MainWindow))
        self.actionInstructions.triggered.connect(lambda: self.instructions())
        # endregion

    def instructions(self):
        self.instructions_window = Instructions.Instructions()
        self.instructions_window.show()

    def delete_record(self, index, __type, column_name):
        row = index.row()
        column = 1
        model = index.model()
        record_id = model.data(model.index(row, column), Qt.DisplayRole)

        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Question)
        msgBox.setWindowTitle("Delete Record")
        msgBox.setText(f"Are you sure you want to delete record {record_id} from table {__type}?")
        msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msgBox.setDefaultButton(QMessageBox.No)

        result = msgBox.exec_()
        if result == QMessageBox.Yes:
            Delete.delete_record(__type, column_name, record_id)
            if __type == "Administrator":
                self.get_table_list("Administrator", self.tblAdmin, 10, 1)
                self.get_table_list("Librarian", self.tblLibrarians, 10, 1)
            elif __type == "Catalog":
                self.get_table_list("Catalog", self.tblCatalog, 10, 1)
            elif __type == "Orders":
                self.get_table_list("Orders", self.tblOrders, 10, 1)
            elif __type == "Reader":
                self.get_table_list("Reader", self.tblReaders, 10, 1)

    def database(self, MainWindow):
        self.db_window = Connect.Connect()
        self.db_window.show()
        MainWindow.close()

    def performence(self):
        self.performence_window = Graph.MainWindow()
        self.performence_window.show()

    def logout(self, MainWindow):
        self.login_window = QtWidgets.QWidget()
        self.ui = Login.Login()
        self.ui.setupUi(self.login_window)
        self.login_window.window().show()
        MainWindow.close()

    def about(self):
        self.about_window = About.Popup()
        self.about_window.show()

    def get_item_uid(self, index, __type):
        row = index.row()
        if __type == "Catalog":
            temp.temp_update_catalog_uid = self.tblCatalog.item(row, 1).text()
            self.txtCatalogNameEdit.setText(self.tblCatalog.item(row, 3).text())
            self.txtCatalogAuthorEdit.setText(self.tblCatalog.item(row, 4).text())
            self.txtCatalogPageEdit.setText(self.tblCatalog.item(row, 5).text())
            self.txtCatalogPrintingEdit.setText(self.tblCatalog.item(row, 6).text())
            self.txtCatalogPublicationEdit.setText(self.tblCatalog.item(row, 7).text())
            self.txtCatalogPrintSkinEdit.setText(self.tblCatalog.item(row, 8).text())
            self.txtCatalogLanguageEdit.setText(self.tblCatalog.item(row, 9).text())
            self.txtCatalogPublicationYearEdit.setText(self.tblCatalog.item(row, 10).text())
            self.txtCatalogTotalEdit.setText(self.tblCatalog.item(row, 11).text())
        elif __type == "Admin":
            temp.temp_update_admin_uid = self.tblAdmin.item(row, 1).text()
            self.cmbAdminEdit.setCurrentText(self.tblAdmin.item(row, 2).text())
            self.txtAdminUsernameEdit.setText(self.tblAdmin.item(row, 3).text())
            self.txtAdminNameEdit.setText(self.tblAdmin.item(row, 4).text())
            self.txtAdminSurnameEdit.setText(self.tblAdmin.item(row, 5).text())
            self.txtAdminEmailEdit.setText(self.tblAdmin.item(row, 6).text())
            self.txtAdminPasswordEdit.setText(self.tblAdmin.item(row, 7).text())
            self.txtAdminConfirmEdit.setText(self.tblAdmin.item(row, 7).text())
            self.cmbAdminStatusEdit.setCurrentText(self.tblAdmin.item(row, 8).text())
        elif __type == "Order":
            dt = QDateTime.fromString(self.tblOrders.item(row, 6).text(), "yyyy-MM-dd HH:mm:ss")
            dt2 = QDateTime.fromString(self.tblOrders.item(row, 7).text(), "yyyy-MM-dd HH:mm:ss")
            temp.temp_update_order_uid = self.tblOrders.item(row, 1).text()
            self.txtOrderUserUIDEdit.setText(self.tblOrders.item(row, 2).text())
            self.txtOrderCatalogUIDEdit.setText(self.tblOrders.item(row, 4).text())
            self.cmbOrderTypeEdit.setCurrentText(self.tblOrders.item(row, 5).text())
            self.dateStartDateEdit.setDateTime(dt)
            self.dateEndDateEdit.setDateTime(dt2)
            self.cmbIsReturnedEdit.setCurrentText(self.tblOrders.item(row, 8).text())
        elif __type == "Reader":
            temp.temp_update_reader_uid = self.tblReaders.item(row, 1).text()
            self.txtReaderUsernameEdit.setText(self.tblReaders.item(row, 3).text())
            self.txtReaderNameEdit.setText(self.tblReaders.item(row, 4).text())
            self.txtReaderSurnameEdit.setText(self.tblReaders.item(row, 5).text())
            self.txtReaderEmailEdit.setText(self.tblReaders.item(row, 6).text())
            self.cmbReaderStatusEdit.setCurrentText(self.tblReaders.item(row, 7).text())
        elif __type == "Librarian":
            temp.temp_update_admin_uid = self.tblLibrarians.item(row, 1).text()
            self.cmbAdminEdit.setCurrentText(self.tblLibrarians.item(row, 2).text())
            self.txtAdminUsernameEdit.setText(self.tblLibrarians.item(row, 3).text())
            self.txtAdminNameEdit.setText(self.tblLibrarians.item(row, 4).text())
            self.txtAdminSurnameEdit.setText(self.tblLibrarians.item(row, 5).text())
            self.txtAdminEmailEdit.setText(self.tblLibrarians.item(row, 6).text())
            self.txtAdminPasswordEdit.setText(self.tblLibrarians.item(row, 7).text())
            self.txtAdminConfirmEdit.setText(self.tblLibrarians.item(row, 7).text())
            self.cmbAdminStatusEdit.setCurrentText(self.tblLibrarians.item(row, 8).text())
        else:
            pass

    def insert_record(self, table):
        try:
            if table == "Administrator":
                if self.txtAdminPasswordInsert.text() != self.txtAdminConfirmInsert.text():
                    Dialogs.error_dialog("Error", "Password", "Passwords did not match!")
                    return

                if self.cmbAdminStatusInsert.currentText() == "Active":
                    admin_status = '1'
                else:
                    admin_status = '0'

                data = {
                    'Administrator_UID': self.random_seed(),
                    'Type': self.cmbAdminInsert.currentText(),
                    'Username': self.txtAdminUsernameInsert.text(),
                    'Name': self.txtAdminNameInsert.text(),
                    'Surname': self.txtAdminSurnameInsert.text(),
                    'Email': self.txtAdminEmailInsert.text(),
                    'Password': self.txtAdminPasswordInsert.text(),
                    'Status': admin_status
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Insert.insert_record(table, data)
            elif table == "Catalog":
                data = {
                    'Catalog_UID': self.random_seed(),
                    'Administrator_UID ': temp.temp_admin_uid,
                    'Name': self.txtCatalogNameInsert.text(),
                    'Author': self.txtCatalogAuthorInsert.text(),
                    'Page': self.txtCatalogPageInsert.text(),
                    'Printing': self.txtCatalogPrintingInsert.text(),
                    'Publication_No': self.txtCatalogPublicationInsert.text(),
                    'Print_and_Skin': self.txtCatalogPrintSkinInsert.text(),
                    'Language': self.txtCatalogLanguageInsert.text(),
                    'Publication_Year': self.txtCatalogPublicationYearInsert.text(),
                    'Total': self.txtCatalogTotalInsert.text(),
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Insert.insert_record(table, data)
            elif table == "Orders":
                is_blocked = self.check_user(self.txtOrderUserUIDInsert.text())
                if is_blocked:
                    if self.cmbIsReturned.currentText() == 'Returned':
                        order_is_returned = '1'
                        self.catalog_total(self.txtOrderCatalogUIDInsert.text(), "plus")
                    else:
                        self.catalog_total(self.txtOrderCatalogUIDInsert.text(), "minus")
                        order_is_returned = '0'

                    date_time_end = self.dateEndDateInsert.dateTime()
                    date_time_end_string = date_time_end.toString("yyyy-MM-dd hh:mm:ss")

                    date_time_start = self.dateStartDateInsert.dateTime()
                    date_time_start_string = date_time_start.toString("yyyy-MM-dd hh:mm:ss")

                    data = {
                        'Order_UID': self.random_seed(),
                        'Administrator_UID ': temp.temp_admin_uid,
                        'User_UID ': self.txtOrderUserUIDInsert.text(),
                        'Catalog_UID': self.txtOrderCatalogUIDInsert.text(),
                        'Type': self.cmbOrderType.currentText(),
                        'Start_Date': date_time_start_string,
                        'End_Date': date_time_end_string,
                        'Is_Returned': order_is_returned
                    }
                    if not all(data.values()):
                        Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                        return
                    Insert.insert_record(table, data)
                else:
                    Dialogs.error_dialog("Error", "Reader blocked.", "Reader blocked due order theft!")
            elif table == "Reader":
                if self.cmbReaderStatus.currentText() == "Subscribed":
                    reader_status = "1"
                elif self.cmbReaderStatus.currentText() == "Not Subscribed":
                    reader_status = "0"
                elif self.cmbReaderStatus.currentText() == "Blocked":
                    reader_status = "2"

                data = {
                    'Reader_UID': self.random_seed(),
                    'Administrator_UID ': temp.temp_admin_uid,
                    'Username ': self.txtReaderUsernameInsert.text(),
                    'Name': self.txtReaderNameInsert.text(),
                    'Surname': self.txtReaderSurnameInsert.text(),
                    'Email': self.txtReaderEmailInsert.text(),
                    'Status': reader_status,
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Insert.insert_record(table, data)
        except Exception as e:
            Dialogs.error_dialog("Error", "An error has occurred.", str(e))

    def update_record(self, table):
        try:
            if table == "Administrator":
                if self.txtAdminPasswordEdit.text() != self.txtAdminConfirmEdit.text():
                    Dialogs.error_dialog("Error", "Password", "Passwords did not match!")
                    return

                if self.cmbAdminStatusEdit.currentText() == "Active":
                    admin_status = '1'
                else:
                    admin_status = '0'

                data = {
                    'Type': self.cmbAdminEdit.currentText(),
                    'Username': self.txtAdminUsernameEdit.text(),
                    'Name': self.txtAdminNameEdit.text(),
                    'Surname': self.txtAdminSurnameEdit.text(),
                    'Email': self.txtAdminEmailEdit.text(),
                    'Password': self.txtAdminPasswordEdit.text(),
                    'Status': admin_status,
                    'Updated_At': datetime.datetime.now()
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Update.alter_record(table, data, {'Administrator_UID': temp.temp_update_admin_uid})
            elif table == "Catalog":
                data = {
                    'Administrator_UID ': temp.temp_admin_uid,
                    'Name': self.txtCatalogNameEdit.text(),
                    'Author': self.txtCatalogAuthorEdit.text(),
                    'Page': self.txtCatalogPageEdit.text(),
                    'Printing': self.txtCatalogPrintingEdit.text(),
                    'Publication_No': self.txtCatalogPublicationEdit.text(),
                    'Print_and_Skin': self.txtCatalogPrintSkinEdit.text(),
                    'Language': self.txtCatalogLanguageEdit.text(),
                    'Publication_Year': self.txtCatalogPublicationYearEdit.text(),
                    'Total': self.txtCatalogTotalEdit.text(),
                    'Updated_At': datetime.datetime.now()
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Update.alter_record(table, data, {'Catalog_UID': temp.temp_update_catalog_uid})
            elif table == "Orders":
                if self.cmbIsReturnedEdit.currentText() == 'Returned':
                    order_is_returned = '1'
                    self.catalog_total(self.txtOrderCatalogUIDEdit.text(), "plus")
                else:
                    self.catalog_total(self.txtOrderCatalogUIDEdit.text(), "minus")
                    order_is_returned = '0'

                date_time_end = self.dateEndDateEdit.dateTime()
                date_time_end_string = date_time_end.toString("yyyy-MM-dd hh:mm:ss")

                date_time_start = self.dateStartDateEdit.dateTime()
                date_time_start_string = date_time_start.toString("yyyy-MM-dd hh:mm:ss")

                data = {
                    'Administrator_UID ': temp.temp_admin_uid,
                    'User_UID ': self.txtOrderUserUIDEdit.text(),
                    'Catalog_UID': self.txtOrderCatalogUIDEdit.text(),
                    'Type': self.cmbOrderTypeEdit.currentText(),
                    'Start_Date': date_time_start_string,
                    'End_Date': date_time_end_string,
                    'Is_Returned': order_is_returned,
                    'Updated_At': datetime.datetime.now()
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Update.alter_record(table, data, {'Order_UID': temp.temp_update_order_uid})
            elif table == "Reader":
                if self.cmbReaderStatusEdit.currentText() == "Subscribed":
                    reader_status = "1"
                elif self.cmbReaderStatusEdit.currentText() == "Not Subscribed":
                    reader_status = "0"
                elif self.cmbReaderStatusEdit.currentText() == "Blocked":
                    reader_status = "2"
                data = {
                    'Administrator_UID ': temp.temp_admin_uid,
                    'Username ': self.txtReaderUsernameEdit.text(),
                    'Name': self.txtReaderNameEdit.text(),
                    'Surname': self.txtReaderSurnameEdit.text(),
                    'Email': self.txtReaderEmailEdit.text(),
                    'Status': reader_status,
                    'Updated_At': datetime.datetime.now()
                }
                if not all(data.values()):
                    Dialogs.error_dialog("Error", "An error has occurred.", "Please fill in all fields.")
                    return
                Update.alter_record(table, data, {'Reader_UID': temp.temp_update_reader_uid})
        except Exception as e:
            Dialogs.error_dialog("Error", "An error has occurred.", str(e))

    def catalog_total(self, catalog_item, _Type):
        total = Show.get_column("catalog", "Total", "Catalog_UID", catalog_item)
        if _Type == "minus":
            data = {
                'Total': str(int(total) - 1),
                'Updated_At': datetime.datetime.now()
            }
            Update.alter_record("catalog", data, {'Catalog_UID': catalog_item})
        else:
            data = {
                'Total': str(int(total) + 1),
                'Updated_At': datetime.datetime.now()
            }
            Update.alter_record("catalog", data, {'Catalog_UID': catalog_item})

    def check_user(self, reader_item):
        user = Show.get_record("reader", "*", "Reader_UID", reader_item)
        if user[7] == '2':
            return False
        else:
            return True

    def search(self, table, widget, search_input, items_per_page, curr):
        widget.clear()
        offset = (curr - 1) * items_per_page
        data = Show.search_records_paginate(temp.temp_current_selected_table, search_input, offset, items_per_page)
        if not data:
            widget.setRowCount(1)
            widget.setColumnCount(1)
            widget.setItem(0, 0, QTableWidgetItem("NULL"))
            item = widget.item(0, 0)
            item.setForeground(QColor("red"))
            widget.show()
        else:
            widget.horizontalHeader().setSectionsClickable(True)
            widget.horizontalHeader().sectionClicked.connect(lambda column: widget.sortItems(column))
            total_pages = math.ceil(Show.count_rows(table) / items_per_page)
            if not self.comboBox.count() > 1:
                for i in range(1, total_pages + 1):
                    self.comboBox.addItem(str(i))
            # self.comboBox.setCurrentIndex(curr - 1)
            # self.btnPrevPage.setEnabled(curr > 1)
            # self.btnNextPage.setEnabled(curr < total_pages)
            widget.setRowCount(len(data))
            widget.setColumnCount(len(data[0]))
            if table == 'Librarian':
                table = 'Administrator'
                column_names = [i[0] for i in Show.get_columns(table)]
            else:
                column_names = [i[0] for i in Show.get_columns(table)]
            widget.setHorizontalHeaderLabels(column_names)
            for i in range(len(data)):
                for j in range(len(data[i])):
                    item = QTableWidgetItem(str(data[i][j]))
                    item.setForeground(QColor(0, 255, 0))
                    widget.setItem(i, j, item)
            widget.show()

    def set_admin_information(self, _translate):
        target = {'Username': temp.temp_username}
        data = Show.show_specified_record("administrator", target)
        for row in data:
            labels = [self.lblId, self.lblUniqueId, self.lblUsername, self.lblName, self.lblSurname, self.lblType,
                      self.lblEmail, self.lblStatus, self.lblCreatedAt, self.lblUpdatedAt]
            row_values = [str(row[0]), row[1], row[3], row[4], row[5], row[2], row[6],
                          "Active" if row[8] == '1' else "Inactive", row[9].strftime("%Y-%m-%d %H:%M:%S"),
                          "NULL" if row[10] is None else row[10].strftime("%Y-%m-%d %H:%M:%S")]
            for label, value in zip(labels, row_values):
                label.setText(value)

    def get_table_list(self, table, widget, items_per_page, curr):
        widget.clear()
        offset = (curr - 1) * items_per_page
        if table == 'Librarian':
            data = Show.show_records_paginate("Administrator", offset, items_per_page, 'Librarian')
            table = 'Administrator'
        elif table == 'Administrator':
            data = Show.show_records_paginate("Administrator", offset, items_per_page, 'Administrator')
        else:
            data = Show.show_records_paginate(table, offset, items_per_page, '')

        widget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        if not data:
            widget.setRowCount(1)
            widget.setColumnCount(1)
            widget.setItem(0, 0, QTableWidgetItem("NULL"))
            item = widget.item(0, 0)
            item.setForeground(QColor("red"))
            widget.show()
        else:
            widget.horizontalHeader().setSectionsClickable(True)
            widget.horizontalHeader().sectionClicked.connect(lambda column: widget.sortItems(column))
            total_pages = math.ceil(Show.count_rows(table) / items_per_page)
            if not self.comboBox.count() > 1:
                for i in range(1, total_pages + 1):
                    self.comboBox.addItem(str(i))
            self.comboBox.setCurrentIndex(curr - 1)
            self.btnPrevPage.setEnabled(curr > 1)
            self.btnNextPage.setEnabled(curr < total_pages)
            widget.setRowCount(len(data))
            widget.setColumnCount(len(data[0]))
            column_names = [i[0] for i in Show.get_columns(table)]
            widget.setHorizontalHeaderLabels(column_names)
            for i in range(len(data)):
                for j in range(len(data[i])):
                    item = QTableWidgetItem(str(data[i][j]))
                    item.setForeground(QColor(0, 255, 0))
                    widget.setItem(i, j, item)
            widget.show()

    def update_table(self, curr):
        if self.comboBox.count() > 1:
            items_per_page = 10
            self.get_table_list(temp.temp_current_selected_table, temp.temp_table_widget, items_per_page, curr)

    def tab_changed(self, index):
        current_tab_text = self.tabWidget.tabText(index)
        mapping = {
            "Admins": ("Administrator", self.tblAdmin),
            "Librarians": ("Librarian", self.tblLibrarians),
            "Catalog": ("Catalog", self.tblCatalog),
            "Orders": ("Orders", self.tblOrders),
            "Reader": ("Reader", self.tblReaders),
        }
        if current_tab_text in mapping:
            temp.temp_current_selected_table, temp.temp_table_widget = mapping[current_tab_text]
            try:
                if self.comboBox.count() > 0:
                    self.comboBox.clear()
                else:
                    self.comboBox.setCurrentIndex(0)
            except Exception as e:
                print("Error: ", str(e))
        self.get_table_list(temp.temp_current_selected_table, temp.temp_table_widget, 10, 1)

    def update_panel_tab(self, _tab, _translate=QtCore.QCoreApplication.translate):
        try:
            tab_widget = self.tabWidget_2  # replace with your tab widget
            background_color = "rgb(0, 0, 0)"
            text_color = "rgb(0,255,0)"

            for widget in tab_widget.findChildren(QWidget):
                widget.setStyleSheet(
                    f"background-color: {background_color}; color: {text_color};border-color:rgb(0,255,0);border-style:solid;border-width:1px")

            tab_widget.setStyleSheet(f"background-color: {background_color}; color: {text_color};")
            tab_widget.setStyleSheet('''
                       QTabBar {
                           background: magenta;
                       }
                       QTabBar::tab {
                           background: green;
                       }
                   ''')

            if _tab is None:
                _tab = self.drpCRUD.currentText()

            if _tab == "Admin":
                self.show_items(self.adminFormInsertGroup)
                self.show_items(self.adminFormEditGroup)

                self.hide_items(self.catalogFormInsertGroup)
                self.hide_items(self.catalogFormEditGroup)

                self.hide_items(self.orderFormInsertGroup)
                self.hide_items(self.orderFormEditGroup)

                self.hide_items(self.readerFormInsertGroup)
                self.hide_items(self.readerFormEditGroup)
            elif _tab == "Catalog":
                self.show_items(self.catalogFormInsertGroup)
                self.show_items(self.catalogFormEditGroup)

                self.hide_items(self.orderFormInsertGroup)
                self.hide_items(self.orderFormEditGroup)

                self.hide_items(self.readerFormInsertGroup)
                self.hide_items(self.readerFormEditGroup)

                self.hide_items(self.adminFormInsertGroup)
                self.hide_items(self.adminFormEditGroup)
            elif _tab == "Orders":
                self.show_items(self.orderFormInsertGroup)
                self.show_items(self.orderFormEditGroup)

                self.hide_items(self.catalogFormInsertGroup)
                self.hide_items(self.catalogFormInsertGroup)

                self.hide_items(self.readerFormInsertGroup)
                self.hide_items(self.readerFormEditGroup)

                self.hide_items(self.adminFormInsertGroup)
                self.hide_items(self.adminFormEditGroup)
            elif _tab == "Reader":
                self.show_items(self.readerFormInsertGroup)
                self.show_items(self.readerFormEditGroup)

                self.hide_items(self.catalogFormInsertGroup)
                self.hide_items(self.catalogFormInsertGroup)

                self.hide_items(self.orderFormInsertGroup)
                self.hide_items(self.orderFormEditGroup)

                self.hide_items(self.adminFormInsertGroup)
                self.hide_items(self.adminFormEditGroup)
        except Exception as e:
            print(e)

    def hide_items(self, layout):
        layout.setVisible(False)

    def show_items(self, layout):
        layout.setVisible(True)

    def random_seed(self):
        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(15))

    def retranslateUi(self, MainWindow):
        # region Design

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(_A, "Home"))
        self.set_admin_information("Admin")
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(_A, "Admins"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(_A, "Librarians"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate(_A, "Catalog"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate(_A, "Orders"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate(_A, "Reader"))
        # endregion

        temp.temp_current_selected_table = "Administrator"
        temp.temp_table_widget = self.tblAdmin

        self.get_table_list("Administrator", self.tblAdmin, 10, 1)
        self.get_table_list("Librarian", self.tblLibrarians, 10, 1)
        self.get_table_list("Catalog", self.tblCatalog, 10, 1)
        self.get_table_list("Orders", self.tblOrders, 10, 1)
        self.get_table_list("Reader", self.tblReaders, 10, 1)

        self.update_panel_tab("Admin", _translate)

        # region Admin Insert
        self.txtAdminUsernameInsert.setPlaceholderText(_translate(_A, "Username"))
        self.txtAdminNameInsert.setPlaceholderText(_translate(_A, "Name"))
        self.txtAdminSurnameInsert.setPlaceholderText(_translate(_A, "Surname"))
        self.txtAdminEmailInsert.setPlaceholderText(_translate(_A, "Email"))
        self.txtAdminPasswordInsert.setPlaceholderText(_translate(_A, "Password"))
        self.txtAdminConfirmInsert.setPlaceholderText(_translate(_A, "Confirm Password"))
        self.btnAdminInsert.setText(_translate(_A, "Save"))
        self.cmbAdminInsert.setItemText(0, _translate(_A, "Administrator"))
        self.cmbAdminInsert.setItemText(1, _translate(_A, "Librarian"))
        self.cmbAdminStatusInsert.setItemText(0, _translate(_A, "Active"))
        self.cmbAdminStatusInsert.setItemText(1, _translate(_A, "Inactive"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate(_A, "Insert"))
        self.txtAdminUsernameEdit.setPlaceholderText(_translate(_A, "Username"))
        self.txtAdminNameEdit.setPlaceholderText(_translate(_A, "Name"))
        self.txtAdminSurnameEdit.setPlaceholderText(_translate(_A, "Surname"))
        self.txtAdminEmailEdit.setPlaceholderText(_translate(_A, "Email"))
        self.txtAdminPasswordEdit.setPlaceholderText(_translate(_A, "Password"))
        self.txtAdminConfirmEdit.setPlaceholderText(_translate(_A, "Confirm Password"))
        self.cmbAdminStatusEdit.setItemText(0, _translate(_A, "Active"))
        self.cmbAdminStatusEdit.setItemText(1, _translate(_A, "Inactive"))
        self.cmbAdminEdit.setItemText(0, _translate(_A, "Administrator"))
        self.cmbAdminEdit.setItemText(1, _translate(_A, "Librarian"))
        self.btnAdminEdit.setText(_translate(_A, "Save"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate(_A, "Edit"))

        # endregion

        # region Catalog Insert
        self.txtCatalogNameInsert.setPlaceholderText(_translate(_A, "Name"))
        self.txtCatalogAuthorInsert.setPlaceholderText(_translate(_A, "Author"))
        self.txtCatalogPageInsert.setPlaceholderText(_translate(_A, "Page"))
        self.txtCatalogPrintingInsert.setPlaceholderText(_translate(_A, "Printing"))
        self.txtCatalogPublicationInsert.setPlaceholderText(_translate(_A, "Publication Number"))
        self.txtCatalogPrintSkinInsert.setPlaceholderText(_translate(_A, "Print and Skin"))
        self.btnCatalogInsert.setText(_translate(_A, "Save"))
        self.txtCatalogLanguageInsert.setPlaceholderText(_translate(_A, "Language"))
        self.txtCatalogPublicationYearInsert.setPlaceholderText(_translate(_A, "Publication Year"))
        self.txtCatalogTotalInsert.setPlaceholderText(_translate(_A, "Total"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate(_A, "Insert"))
        self.txtCatalogNameEdit.setPlaceholderText(_translate(_A, "Name"))
        self.txtCatalogAuthorEdit.setPlaceholderText(_translate(_A, "Author"))
        self.txtCatalogPageEdit.setPlaceholderText(_translate(_A, "Page"))
        self.txtCatalogPrintingEdit.setPlaceholderText(_translate(_A, "Printing"))
        self.txtCatalogPublicationEdit.setPlaceholderText(_translate(_A, "Publication Number"))
        self.txtCatalogPrintSkinEdit.setPlaceholderText(_translate(_A, "Print and Skin"))
        self.btnCatalogEdit.setText(_translate(_A, "Save"))
        self.txtCatalogLanguageEdit.setPlaceholderText(_translate(_A, "Language"))
        self.txtCatalogPublicationYearEdit.setPlaceholderText(_translate(_A, "Publication Year"))
        self.txtCatalogTotalEdit.setPlaceholderText(_translate(_A, "Total"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate(_A, "Edit"))
        # endregion

        # region Order Insert
        self.txtOrderUserUIDInsert.setPlaceholderText(_translate(_A, "User Unique Id"))
        self.txtOrderCatalogUIDInsert.setPlaceholderText(_translate(_A, "Catalog Unique Id"))
        self.cmbOrderType.setItemText(0, _translate(_A, "Subscription"))
        self.cmbOrderType.setItemText(1, _translate(_A, "Room"))
        self.cmbIsReturned.setItemText(0, _translate(_A, "Returned"))
        self.cmbIsReturned.setItemText(1, _translate(_A, "Not Returned"))
        self.label_22.setText(_translate(_A, "End Date"))
        self.btnOrderInsert.setText(_translate(_A, "Save"))
        self.label_21.setText(_translate(_A, "Start Date"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate(_A, "Insert"))
        self.txtOrderUserUIDEdit.setPlaceholderText(_translate(_A, "User Unique Id"))
        self.txtOrderCatalogUIDEdit.setPlaceholderText(_translate(_A, "Catalog Unique Id"))
        self.cmbOrderTypeEdit.setItemText(0, _translate(_A, "Subscription"))
        self.cmbOrderTypeEdit.setItemText(1, _translate(_A, "Room"))
        self.cmbIsReturnedEdit.setItemText(0, _translate(_A, "Returned"))
        self.cmbIsReturnedEdit.setItemText(1, _translate(_A, "Not Returned"))
        self.label_23.setText(_translate(_A, "End Date"))
        self.btnOrderEdit.setText(_translate(_A, "Save"))
        self.label_24.setText(_translate(_A, "Start Date"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate(_A, "Edit"))

        # endregion

        # region Reader Insert
        self.txtReaderUsernameInsert.setPlaceholderText(_translate(_A, "Username"))
        self.txtReaderNameInsert.setPlaceholderText(_translate(_A, "Name"))
        self.txtReaderSurnameInsert.setPlaceholderText(_translate(_A, "Surname"))
        self.txtReaderEmailInsert.setPlaceholderText(_translate(_A, "Email"))
        self.cmbReaderStatus.setItemText(0, _translate(_A, "Subscribed"))
        self.cmbReaderStatus.setItemText(1, _translate(_A, "Not Subscribed"))
        self.cmbReaderStatus.setItemText(2, _translate(_A, "Blocked"))
        self.btnReaderInsert.setText(_translate(_A, "Save"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate(_A, "Insert"))
        self.txtReaderUsernameEdit.setPlaceholderText(_translate(_A, "Username"))
        self.txtReaderNameEdit.setPlaceholderText(_translate(_A, "Name"))
        self.txtReaderSurnameEdit.setPlaceholderText(_translate(_A, "Surname"))
        self.txtReaderEmailEdit.setPlaceholderText(_translate(_A, "Email"))
        self.cmbReaderStatusEdit.setItemText(0, _translate(_A, "Subscribed"))
        self.cmbReaderStatusEdit.setItemText(1, _translate(_A, "Not Subscribed"))
        self.cmbReaderStatusEdit.setItemText(2, _translate(_A, "Blocked"))
        self.btnReaderEdit.setText(_translate(_A, "Save"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate(_A, "Edit"))
        # endregion

        # region Design
        self.txtSearch.setPlaceholderText(_translate(_A, "Search"))
        self.label_4.setText(_translate(_A, "Unique Id  :"))
        self.label_5.setText(_translate(_A, "Username : "))
        self.label_7.setText(_translate(_A, "Type :"))
        self.label_9.setText(_translate(_A, "Name:"))
        self.label_12.setText(_translate(_A, "Surname :"))
        self.label_13.setText(_translate(_A, "Email :"))
        self.label_16.setText(_translate(_A, "Status :"))
        self.label_18.setText(_translate(_A, "Created At :"))
        self.label_20.setText(_translate(_A, "Updated At :"))
        self.btnNextPage.setText(_translate(_A, ">"))
        self.btnPrevPage.setText(_translate(_A, "<"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate(_A, "Insert"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate(_A, "Edit"))
        self.drpCRUD.setCurrentText(_translate(_A, "Admin"))
        self.drpCRUD.setItemText(0, _translate(_A, "Admin"))
        self.drpCRUD.setItemText(1, _translate(_A, "Catalog"))
        self.drpCRUD.setItemText(2, _translate(_A, "Orders"))
        self.drpCRUD.setItemText(3, _translate(_A, "Reader"))
        self.menuAbout.setTitle(_translate(_A, "About"))
        self.menuAdministrator.setTitle(_translate(_A, "Settings"))
        self.menuPerformence.setTitle(_translate(_A, "Performence"))
        self.actionInstructions.setText(_translate(_A, "Instructions"))
        self.actionDatabase.setText(_translate(_A, "Database"))
        self.actionLogout.setText(_translate(_A, "Logout"))
        # endregion


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Home()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
